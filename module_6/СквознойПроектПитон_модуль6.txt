ЗАДАЧА
Написать на Python с использованием Docker утилиту, имеющую следующую функциональность:

1) сбор информации об активных хостах в сети с помощью техники ping sweep;

2) функция HTTP-прокси-сервера (отправление и получение HTTP-запросов).

НАЗНАЧЕНИЕ УТИЛИТЫ
Сканирование сети на наличие рабочих устройств техникой ping sweep.
Составление HTTP-запросов и парсинг HTTP-ответов.
УСЛОВИЯ РЕАЛИЗАЦИИ
Утилита должна быть написана на языке Python с использованием библиотеки requests (другие библиотеки также могут использоваться, но requests обязательна).
Утилита представляет собой простой HTTP-прокси-сервер, который умеет отправлять HTTP-запрос и получать/анализировать HTTP-ответ.
Наличие интерфейса связи с утилитой для отправления команд и опций с использованием интерфейса командной строки.
Утилита должна быть поднята в докер-контейнере.
Дополнительное условие (при желании)

5*. Интерфейс может быть реализован через API (Application Programming Interface).

УТОЧНЕНИЯ
При отправке HTTP-запроса пользователь может выбрать метод (GET, POST), header (минимум 5 шт.) и payload (сформировать его самостоятельно).

Соответственно, при получении HTTP-ответа пользователь должен видеть:

хедеры ответа,
payload ответа.

*******************************************

ДОПОЛНИТЕЛЬНОЕ ЗАДАНИЕ (*)
В случае, если вам не составило труда справиться со сквозной задачей и у вас есть запас времени до следующего модуля, вы можете доработать утилиту, реализовав API на базе библиотеки http.server. Подробнее с библиотекой можно познакомиться в документации и в полезных статьях.

ПРИМЕР РАБОТЫ УТИЛИТЫ ЧЕРЕЗ API
Адрес докер-контейнера: 192.168.1.10
Порт, на котором работает API: 3000
1. Пользователь может отправить POST-запрос на 192.168.1.10:3000/sendhttp со следующим телом запроса:

{"Header": "Content-type", "Header-value": "text", "Target":"www.google.com", "Method": "GET"}
Утилита в докере получает этот запрос и отправляет на адрес www.google.com GET-запрос, в котором есть header "Content-type" со значением "text". При получении ответа утилита отправляет пользователю HTTP-ответ с результатами.

2. Пользователь может отправить GET-запрос на 192.168.1.10:3000/scan со следующим телом запроса:

{"target":"192.168.1.0", "count": "20"}
192.168.1.0 в данном случае — сеть, которую нужно просканировать, а 20 — количество устройств, которые нужно просканировать. В итоге будут просканированы IP-адреса 192.168.1.1 – 192.168.1.20.

API получает этот запрос и сканирует сеть с заданными параметрами, а результат сканирования отправляет в качестве HTTP-ответа.
***************************************
Всеволод, здравствуйте!

Да, всё верно, вам нужно реализовать функционал http-прокси сервера для отправки запросов, а также сканера сети в рамках одной утилиты. Причём передача параметров утилите должна осуществляться через CLI.

Так команда для сканирования сети будет выглядить так:

python scanner.py scan -i 192.168.0.1 -n 10

А для использования функционала http-прокси:

Для GET запроса:
python scanner.py sendhttp -t https://google.com -m GET -hd Accept-Language:ru

Для POST запроса:
python scanner.py sendhttp -t https://google.com -m POST -hd Accept-Language:ru -p random_payload

Часть утилиты ответственная за сканирование сети была реализована полностью. Функционал http-прокси сервера тоже был реализован (в функции sent_http_request), и требуется только дописать код так, чтобы параметры http-прокси серверу можно было передавать через CLI.

Отвечая на ваш вопрос относительно того что должно получиться на выходе. Функция sent_http_request, после отправки запроса с параметрами которые были переданы нами через CLI, выведет код ответа сервера к которому осуществлялось обращение, заголовки ответа этого сервера, и тело ответа этого сервере если таковое есть

***************************

Здравствуйте, Александр! Программа написана отлично, с соблюдением всех требований: 1. Использованы необходимые библиотеки 2. Реализованы 2 функции: сканирование и отправление http запросов 3. Реализован CLI интерфейс для работы с этими функциями 4. Комментарии в коде - отлично! На данном этапе бОльшего не требовалось реализовать. По поводу докера - мы делали что-то похожее в модуле про докер, только в косвенном виде: FROM python:3.8.10 WORKDIR /code COPY . /code RUN pip install --no-cache-dir -r requirements.txt EXPOSE 3000 ENTRYPOINT ["python3"] CMD ["main.py"] Это примерный код Dockerfile для скрипта, который работает через API на 3000 порту Кроме того, нужно будет немного доработать сам код: 1. Добавьте, пожалуйста, стандартные значения. Чтобы если пользователь забудет указать конкретный метод\количество хостов, Ваша программа автоматически подставляла, например, GET. В остальном - отличная работа! Для финального задания Вам осталось попробовать обернуть программу в докер контейнер и постараться сделать управление функциями (ping sweep и отправка http запросов) через API. В случае возникновения сложностей или вопросов обращайтесь, пожалуйста, в канал Slack #вводный-курс или #сквозная-задача С Уважением, отзыв оставил ментор Зубченко Константин



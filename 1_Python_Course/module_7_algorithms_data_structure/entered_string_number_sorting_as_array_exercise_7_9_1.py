# Задание 7.9.1 Напишите программу, которой на вход подается последовательность чисел через пробел,
# а также запрашивается у пользователя любое число.
# В качестве задания повышенного уровня сложности можете выполнить проверку соответствия указанному в условии ввода
# данных.
# Далее программа работает по следующему алгоритму:
#
# 1. Преобразование введённой последовательности в список.
# 2. Сортировка списка по возрастанию элементов в нем (для реализации сортировки определите функцию).
# 3. Устанавливается номер позиции элемента, который меньше введенного пользователем числа, а следующий за ним больше
# или равен этому числу.
#
# При установке позиции элемента воспользуйтесь алгоритмом двоичного поиска, который был рассмотрен в этом модуле.
# Реализуйте его также отдельной функцией.
#
# Подсказка:
#
# Помните, что у вас есть числа, которые могут не соответствовать заданному условию. В этом случае необходимо вывести
# соответствующее сообщение.
array = input("Введите последовательности чисел через пробел: ")
rand_num = input("Введите любое число: ")

list_of_strings =  array.split() # список строковых представлений чисел
list_of_numbers = list(map(int, list_of_strings)) # список чисел
print(list_of_numbers)


# def binary_search(array, element, left, right) :
#     if left > right :  # если левая граница превысила правую,
#         return False  # значит элемент отсутствует
#
#     middle = (right + left) // 2  # находим середину
#     if array[middle] == element :  # если элемент в середине
#         return middle  # возвращаем этот индекс
#     elif element < array[middle] :  # если элемент меньше элемента в середине
#         # рекурсивно ищем в левой половине
#         return binary_search(array, element, left, middle - 1)
#     else :  # иначе в правой
#         return binary_search(array, element, middle + 1, right)
#
#
# element = int(input("Введите элемент который будем искать в массиве: "))
# array = [i for i in range(1, 100)]  # поиск ведётся в отсортированном (!) массиве
# print(array)
# # запускаем алгоритм на левой и правой границе
# print(binary_search(array, element, 0, 99))